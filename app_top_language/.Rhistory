library(plyr)
install.packages("plyr","reshape2","stringr","ggplot2","RPostgresSQL")
install.packages("plyr","stringr")
install.packages(c("plyr","reshape2","stringr","ggplot2","RPostgresSQL"))
library(plyr)
library(reshape2)
library(stringr)
library(ggplot2)
library(RPostgreSQL)
install.packages("RPostgreSQL")
library(RPostgreSQL)
pgdrv <- dbDriver("PostgreSQL")
con <- dbConnect(pgdrv, dbname="usage_warehouse_combined", user = "postgres", pass = "postgres", host = "rust")
cscd.df <- dbGetQuery(con,
"select case when c.total_seats < 25 then '1-24'
when c.total_seats < 50 then '25-49'
when c.total_seats < 200 then '50-199'
when c.total_seats < 500 then '200-499'
when c.total_seats < 2000 then '500-1999' else '>2000' end as sizecat
, c.total_seats as totalseats
, c.enabled_users as enabledusers
, l.weekly_count as d7
, l.thirty_day_count as d30
, l.ninety_day_count as d90
, (l.thirty_day_count)::decimal / (c.total_seats)::decimal   as p30
, c.id as rustid
, c.subscription as subid
, c.subscription_name as subname
, c.subscription_oid as suboid
, c.edition
from current_sub_config_dimension c
left join login_summary_facts l on c.id = l.subscription_id
where c.stack = 'PROD'
and c.is_current = true
and c.is_active = true
and c.termination_date is null
and c.expiration_date is null
and c.total_seats > 1
and c.subscription > 100
and c.has_utility_billing = false
and c.edition in ('Enterprise','Unlimited','Express_Edition')
and c.subscription_name not like '%rallydev.com%'
and l.date_id in (select max(date_id) from login_summary_facts)")
## closes the connection
dbDisconnect(con)
dbUnloadDriver(pgdrv)
rm(list=c("con","pgdrv"))
View(cscd.df)
View(cscd.df)
cscd.df$sizecat <- ordered(cscd.df$sizecat,
levels = c("1-24","25-49","50-199","200-499","500-1999",">2000"))
qplot(enabledusers, d30, data = cscd.df, geom = "point") +
geom_point(size = 5) +
xlab("Enabled Users") +
ylab("30 Day Unique Users") +
stat_smooth(method = "lm", level = .99) +
theme_bw(base_size = 18)
mod.e <- lm(d30 ~ enabledusers, data = cscd.df)
mod.e
summary(mod.e)
str(cscd.df)
mod.e <- lm(d30 ~ enabledusers, data = subset(cscd.df, enabledusers < 5000))
summary(mod.e)
mod.e <- lm(d30 ~ enabledusers, data = subset(cscd.df, enabledusers < 500))
summary(mod.e)
mod.e <- lm(d30 ~ enabledusers, data = subset(cscd.df, enabledusers < 50))
summary(mod.e)
str(cscd.df)
qplot(enabledusers, d30, data = subset(cscd.df, enabledusers < sub_num), geom = "point") +
geom_point(size = 5) +
xlab("Enabled Users") +
ylab("30 Day Unique Users") +
stat_smooth(method = "lm", level = .99) +
theme_bw(base_size = 18)
mod.e <- lm(d30 ~ enabledusers, data = subset(cscd.df, enabledusers < sub_num))
summary(mod.e)
sub_num = 500
qplot(enabledusers, d30, data = subset(cscd.df, enabledusers < sub_num), geom = "point") +
geom_point(size = 5) +
xlab("Enabled Users") +
ylab("30 Day Unique Users") +
stat_smooth(method = "lm", level = .99) +
theme_bw(base_size = 18)
sub_num = 500
qplot(enabledusers, d30, data = subset(cscd.df, enabledusers < sub_num), geom = "point") +
geom_point(size = 2) +
xlab("Enabled Users") +
ylab("30 Day Unique Users") +
stat_smooth(method = "lm", level = .99) +
theme_bw(base_size = 18)
mod.e <- lm(d30 ~ enabledusers, data = subset(cscd.df, enabledusers < sub_num))
summary(mod.e)
qplot(enabledusers, d30, data = subset(cscd.df, enabledusers < sub_num), geom = "point") +
geom_point(size = 2, alpha = .5) +
xlab("Enabled Users") +
ylab("30 Day Unique Users") +
stat_smooth(method = "lm", level = .99) +
theme_bw(base_size = 18)
ddply(.data = cscd.df, .(),
summarize,
meanseats = mean(totalseats),
medianseats = median(totalseats),
sumseats = sum(totalseats),
d30 = sum(d30),
subs = length(edition))
ddply(.data = cscd.df, .(edition), summarize,
meanseats = mean(totalseats),
medianseats = median(totalseats),
q75seats = quantile(totalseats, .75),
sumseats = sum(totalseats),
d30 = mean(p30),
subs = length(edition))
ddply(.data = cscd.df, .(),
summarize,
meanseats = mean(totalseats),
medianseats = median(totalseats),
sumseats = sum(totalseats),
d30 = sum(d30),
subs = length(edition))
ddply(.data = cscd.df, .(edition), summarize,
meanseats = mean(totalseats),
medianseats = median(totalseats),
q75seats = quantile(totalseats, .75),
sumseats = sum(totalseats),
d30 = mean(p30),
subs = length(edition))
hist(cscd.df$totalseats)
hist(log10(cscd.df$totalseats))
install.packages("shiny")
library(shiny)
library(plyr)
library(ggplot2)
library(reshape2)
library(lubridate)
setwd("~/Dev/non_work_projects/shiny_workshop_2/app_getting_started")
getwd()
setwd('../')
getwd()
RunApp("app_getting_started")
runApp("app_getting_started")
runApp("app_getting_started")
faithful
str(faithful)
head(faithful)
head(faithful)
str(faithful)
head(faithful)
tail(faithful)
tail(faithful$waiting)
table(faithful$waiting)
hist(faithful$eruptions)
hist(faithful$eruptions,
breaks = 20)
getwd()
runApp("app_getting_started")
runApp("app_histogram")
?hist
?faithful
data <- read.csv("data/event_lang_day.csv", stringsAsFactors = F)
getwd()
data <- read.csv("app_top_lang/data/event_lang_day.csv", stringsAsFactors = F)
data <- read.csv("app_top_language/data/event_lang_day.csv", stringsAsFactors = F)
str(data)
data <- read.csv("app_top_language/data/event_lang_day.csv", stringsAsFactor = F)
getwd()
data <- read.csv("./app_top_language/data/event_lang_day.csv", stringsAsFactor = F)
setwd("~/Dev/non_work_projects/shiny_workshop_2/app_top_language")
setwd("~/Dev/non_work_projects/shiny_workshop/app_top_language")
data <- read.csv("data/event_lang_day.csv", stringsAsFactor = F)
str(data)
lang <- ddply(data, .(type, repository_language), summarize,
num_event = sum(count_event))
str(lang)
lang <- subset(lang,type == "PushEvent")
str(lang)
lang <- lang[order(lang$num_event, decreasing=T),]
str(lang)
top_lang <- lang[1:20,]
ggplot(top_lang, aes(repository_language, num_event)) +
geom_bar(stat="identity", fill = 'steelblue', alpha = .7) +
coord_flip()
top_lang <- transform(top_lang, repository_language=reorder(repository_language, num_event))
ggplot(top_lang, aes(repository_language, num_event)) +
geom_bar(stat="identity", fill = 'steelblue', alpha = .7) +
coord_flip()
p <- ggplot(top_lang, aes(repository_language, num_event)) +
geom_bar(stat="identity", fill = 'steelblue', alpha = .7) +
coord_flip()
print(p)
top_lang <- lang[1:30,]
top_lang <- transform(top_lang, repository_language=reorder(repository_language, num_event))
## make a bar chart of the top languages
p <- ggplot(top_lang, aes(repository_language, num_event)) +
geom_bar(stat="identity", fill = 'steelblue', alpha = .7) +
coord_flip()
print(p)
getwd()
setwd("/Users/wsurles/Dev/non_work_projects/shiny_workshop")
getwd()
runApp("app_histogram")
runApp("app_top_language")
runApp("app_top_language")
